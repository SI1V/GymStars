from loguru import logger
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from database.connection import connection
from keyboards.main_menu import MAIN_MENU_TEXT
from models import ExerciseType
from states.exercise_states import ExerciseStates, CreateExerciseState, ExerciseEditState, DeleteExercise
from keyboards.exercise import build_exercise_keyboard, build_exercise_type_keyboard, build_type_keyboard, \
    build_exercise_action_keyboard, build_delete_confirmation_keyboard
from crud.exercise import get_exercises_by_type, create_exercise
from crud.exercise import get_exercise_by_id, update_exercise_by_name, delete_exercise

router = Router()

PAGE_SIZE = 5


async def safe_edit_message(callback: CallbackQuery, text: str, reply_markup):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å.
    """
    current_text = callback.message.text
    current_markup = callback.message.reply_markup

    if current_text == text and current_markup == reply_markup:
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")
        await callback.answer()
        return

    await callback.message.edit_text(text, reply_markup=reply_markup)
    await callback.answer()


@router.message(F.text == "/exercises")
async def start_exercise_flow(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –ø—Ä–æ—Å–º–æ—Ç—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.")
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:", reply_markup=build_exercise_type_keyboard())
    await state.set_state(ExerciseStates.choosing_type)


@router.callback_query(F.data.startswith("exercise_type_"))
@connection
async def chosen_type(callback: CallbackQuery, state: FSMContext, session):
    try:
        # –ù–∞–¥—ë–∂–Ω–æ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ç–∏–ø
        _, _, type_raw = callback.data.split("_", maxsplit=2)
        enum_type = ExerciseType[type_raw.upper()]
    except (ValueError, KeyError) as e:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–∏–ø–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {callback.data} | {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.", show_alert=True)
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {enum_type.value}")
    await state.update_data(exercise_type=enum_type.value)

    page = 0        # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page_size = 5   # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º page –∏ page_size
    exercises, total = await get_exercises_by_type(
        session,
        exercise_type=enum_type.value,
        user_id=callback.from_user.id,
        page=page,
        page_size=page_size,
    )

    keyboard = build_exercise_keyboard(
        exercises=exercises,
        page=page,
        total=total,
        page_size=page_size,
        for_workout=False
    )

    await callback.message.edit_text(
        text=f"üìã –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Ç–∏–ø–∞: {enum_type.value}",
        reply_markup=keyboard
    )
    await callback.answer()



@router.callback_query(F.data.startswith("exercises_page_"))
@connection
async def paginate(callback: CallbackQuery, state: FSMContext, session):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–µ—Ä–µ—à–µ–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {callback.data.split('_')[-1]}.")
    data = await state.get_data()
    type_raw = data.get("exercise_type")
    page = int(callback.data.split("_")[-1])
    await state.update_data(page=page)

    exercises, total = await get_exercises_by_type(
        session=session,
        exercise_type=type_raw,
        user_id=callback.from_user.id,
        page=page,
        page_size=PAGE_SIZE
    )

    markup = build_exercise_keyboard(exercises, page=page, total=total, page_size=PAGE_SIZE)

    await safe_edit_message(callback, f"–¢–∏–ø: {type_raw.upper()}\n–í—ã–±–µ—Ä–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:", markup)


@router.message(F.text == "/new_exercise")
async def start_create_exercise(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.")
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:", reply_markup=build_type_keyboard())
    await state.set_state(CreateExerciseState.choosing_type)


@router.callback_query(F.data.startswith("new_type_"))
async def choose_type(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª —Ç–∏–ø –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {callback.data}.")
    type_str = callback.data.split("_")[-1]
    await state.update_data(type=type_str)
    await callback.message.edit_text(f"–¢–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {type_str.upper()}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:")
    await state.set_state(CreateExerciseState.entering_name)
    await callback.answer()


@router.message(CreateExerciseState.entering_name)
@connection
async def enter_name(message: Message, state: FSMContext, session):
    data = await state.get_data()
    type_str = data.get("type")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Å–æ–∑–¥–∞–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ {type_str} —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º: {message.text}.")
    try:
        ex = await create_exercise(
            session=session,
            name=message.text,
            description="",
            ex_type=type_str,
            user_id=message.from_user.id
        )
        logger.info(f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {ex.name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}.")
        await message.answer(f"‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ ¬´{ex.name}¬ª —Ç–∏–ø–∞ {type_str.upper()} —Å–æ–∑–¥–∞–Ω–æ!")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
        page = 0
        exercises, total = await get_exercises_by_type(
            session=session,
            exercise_type=type_str,
            user_id=message.from_user.id,
            page=page,
            page_size=PAGE_SIZE
        )
        markup = build_exercise_keyboard(exercises, page=page, total=total, page_size=PAGE_SIZE)
        await message.answer(f"–¢–∏–ø: {type_str.upper()}\n–í—ã–±–µ—Ä–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:", reply_markup=markup)
        await state.update_data(exercise_type=type_str, page=0)
        await state.set_state(ExerciseStates.showing_exercises)
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥—É /new_exercise.")
        await state.clear()


@router.callback_query(F.data.regexp(r"^exercise_\d+$"))
@connection
async def show_exercise_actions(callback: CallbackQuery, state: FSMContext, session):
    try:
        parts = callback.data.split("_")
        if len(parts) < 2 or not parts[1].isdigit():
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data")

        exercise_id = int(parts[1])
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ID —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ callback_data: {callback.data} | {e}")
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.", show_alert=True)
        return

    exercise = await get_exercise_by_id(session=session, ex_id=exercise_id)

    if exercise is None:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é.")
        await callback.answer("üö´ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    data = await state.get_data()
    exercise_type = data.get("exercise_type")

    if exercise.is_default:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {exercise.name}.")
        await callback.message.edit_text(
            f"üèãÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {exercise.name}",
            reply_markup=build_exercise_action_keyboard(
                exercise_id=exercise.id,
                exercise_type=exercise_type,
                is_default=exercise.is_default
            )
        )
        await callback.answer()
        return

    # –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Ç–æ–∂–µ –ø–µ—Ä–µ–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    await callback.message.edit_text(
        f"üèãÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {exercise.name}\n\n"
        f"–¢–∏–ø: {exercise.type.value}",
        reply_markup=build_exercise_action_keyboard(
            exercise_id=exercise.id,
            exercise_type=exercise_type
        )
    )
    await callback.answer()



@router.callback_query(F.data.startswith("edit_exercise_"))
async def edit_exercise(callback: CallbackQuery, state: FSMContext):
    exercise_id = int(callback.data.split("_")[2])
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è {exercise_id}.")
    await state.update_data(exercise_id=exercise_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:")
    await state.set_state(ExerciseEditState.entering_name)
    await callback.answer()


@router.message(ExerciseEditState.entering_name)
@connection
async def update_exercise_name_handler(message: Message, state: FSMContext, session):
    data = await state.get_data()
    exercise_id = data.get("exercise_id")
    new_name = message.text

    try:
        updated_exercise = await update_exercise_by_name(session=session, exercise_id=exercise_id, new_name=new_name)
        logger.info(f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {updated_exercise.id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}.")
        # –ü–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
        type_str = updated_exercise.type.value.lower()
        page = 0
        exercises, total = await get_exercises_by_type(
            session=session,
            exercise_type=type_str,
            user_id=message.from_user.id,
            page=page,
            page_size=PAGE_SIZE
        )
        markup = build_exercise_keyboard(exercises, page=page, total=total, page_size=PAGE_SIZE)
        await message.answer(f"‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_exercise.name}")
        await message.answer(f"–¢–∏–ø: {type_str.upper()}\n–í—ã–±–µ—Ä–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:", reply_markup=markup)
        await state.update_data(exercise_type=type_str, page=0)
        await state.set_state(ExerciseStates.showing_exercises)
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {e}")
        await message.answer("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()


@router.callback_query(F.data.startswith("delete_exercise_"))
async def confirm_delete_exercise(callback: CallbackQuery, state: FSMContext):
    try:
        exercise_id = int(callback.data.split("_")[2])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.", show_alert=True)
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è {exercise_id}.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    data = await state.get_data()
    await state.update_data(exercise_id=exercise_id, exercise_type=data.get("exercise_type"))

    await callback.message.edit_text(
        "‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ?",
        reply_markup=build_delete_confirmation_keyboard(data.get("exercise_type"))
    )
    await state.set_state(DeleteExercise.confirm)
    await callback.answer()



@router.callback_query(F.data == "confirm_delete")
@connection
async def confirm_delete(callback: CallbackQuery, state: FSMContext, session):
    data = await state.get_data()
    exercise_id = data.get("exercise_id")
    exercise_type = data.get("exercise_type")
    user_id = callback.from_user.id

    if not exercise_id:
        logger.error("ID —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")
        await callback.answer("üö´ –û—à–∏–±–∫–∞: ID —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è {exercise_id}.")

    deleted_count = await delete_exercise(session=session, ex_id=exercise_id, user_id=user_id)

    if deleted_count == 0:
        logger.warning(f"–£–¥–∞–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è {exercise_id} –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await callback.answer("üö´ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ.", show_alert=True)
        return

    await callback.answer("‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    page = 0
    page_size = 5
    exercises, total = await get_exercises_by_type(
        session=session,
        exercise_type=exercise_type,
        user_id=user_id,
        page=page,
        page_size=page_size
    )

    await callback.message.edit_text(
        text="–°–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π",
        reply_markup=build_exercise_keyboard(
            exercises=exercises,
            page=page,
            total=total,
            page_size=page_size,
            for_workout=False
        )
    )

    await state.clear()



@router.callback_query(F.data == "confirm_delete")
@connection
async def confirm_delete(callback: CallbackQuery, state: FSMContext, session):
    data = await state.get_data()
    exercise_id = data.get("exercise_id")
    exercise_type = data.get("exercise_type")
    user_id = callback.from_user.id

    if not exercise_id:
        logger.error("ID —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")
        await callback.answer("üö´ –û—à–∏–±–∫–∞: ID —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è {exercise_id}.")

    deleted_count = await delete_exercise(session=session, ex_id=exercise_id, user_id=user_id)

    if deleted_count == 0:
        logger.warning(f"–£–¥–∞–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è {exercise_id} –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await callback.answer("üö´ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ.", show_alert=True)
        return

    await callback.answer("‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    page = 0
    page_size = 5
    exercises, total = await get_exercises_by_type(
        session=session,
        exercise_type=exercise_type,
        user_id=user_id,
        page=page,
        page_size=page_size
    )

    await callback.message.edit_text(
        text="üìã –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. –í–æ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫:",
        reply_markup=build_exercise_keyboard(
            exercises=exercises,
            page=page,
            total=total,
            page_size=page_size,
            for_workout=False
        )
    )

    await state.clear()



@router.callback_query(F.data.startswith("back_to_exercises_"))
@connection
async def back_to_exercises(callback: CallbackQuery, state: FSMContext, session):
    exercise_type = callback.data.split("_")[-1]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ —Å–ø–∏—Å–∫—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Ç–∏–ø–∞ {exercise_type}.")

    # –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, –Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∏–ø –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    data = await state.get_data()
    page = data.get("page", 0)
    await state.update_data(exercise_id=None)

    exercises, total = await get_exercises_by_type(
        session=session,
        exercise_type=exercise_type,
        user_id=callback.from_user.id,
        page=page,
        page_size=PAGE_SIZE
    )

    markup = build_exercise_keyboard(exercises, page=page, total=total, page_size=PAGE_SIZE)

    await safe_edit_message(callback, f"–¢–∏–ø: {exercise_type.upper()}\n–í—ã–±–µ—Ä–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:", markup)
    await state.set_state(ExerciseStates.showing_exercises)


@router.callback_query(F.data == "back_to_types")
async def back_to_types(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.")
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:",
        reply_markup=build_exercise_type_keyboard()
    )
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "main_menu")
async def main_menu(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await callback.message.answer(MAIN_MENU_TEXT)
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "cancel_create_exercise")
async def cancel_create_exercise(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.")
    await callback.message.edit_text(
        "–°–æ–∑–¥–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=build_exercise_type_keyboard()
    )
    await state.set_state(ExerciseStates.choosing_type)
    await callback.answer()
