from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.filters import Command

from database.connection import connection
from keyboards.main_menu import MAIN_MENU_TEXT
from states.workout_states import WorkoutStates
from keyboards.workout import workout_menu_kb, workout_confirm_kb, generate_calendar_kb, add_exercise_kb
from crud.workout import create_workout, get_user_workouts, get_workout_by_id, get_workout_by_user_and_date, get_workout_details
from crud.exercise import get_exercises_by_type, get_exercise_by_id
from loguru import logger
from aiogram.types import CallbackQuery
from telegram_calendar import build_calendar, CalendarCallback
from typing import Dict
from datetime import datetime
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from schemas.workout import WorkoutCreateSchema
from keyboards.exercise import build_exercise_keyboard, build_exercise_type_keyboard

router = Router()


@router.message(Command("workouts"))
@connection
async def workouts_calendar(message: Message, state: FSMContext, session):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
    now = datetime.now()
    workouts = await get_user_workouts(session, user_id=message.from_user.id)
    icon_dates: Dict[str, str] = {}
    for w in workouts:
        # –ó–∞–º–µ–Ω—è–µ–º –¥–∞—Ç—É –Ω–∞ –∏–∫–æ–Ω–∫—É –∫—É–±–∫–∞
        icon_dates[str(w.date)] = "üèÜ"
    calendar = build_calendar(now.year, now.month, icon_dates=icon_dates)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=calendar)
    await state.clear()

@router.callback_query(CalendarCallback.filter())
@connection
async def process_calendar_selection(call: CallbackQuery, callback_data: CalendarCallback, state: FSMContext, session):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å: {callback_data}")
    action = callback_data.action
    year = callback_data.year
    month = callback_data.month
    day = getattr(callback_data, "day", 0)
    workouts = await get_user_workouts(session, user_id=call.from_user.id)
    icon_dates: Dict[str, str] = {}
    for w in workouts:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–∫—É—é –∂–µ –∏–∫–æ–Ω–∫—É –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        icon_dates[str(w.date)] = "üèÜ"
    if action == "select_day" and day > 0:
        date = datetime(year, month, day).date()
        workout = await get_workout_by_user_and_date(session, user_id=call.from_user.id, date=date)
        if workout:
            try:
                workout_details = await get_workout_details(session=session, workout=workout)

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
                text = f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ {date.strftime('%d.%m.%Y')}\n–ó–∞–º–µ—Ç–∫–∞: {workout.comment or '-'}\n\n–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:"

                # –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø–æ—Ä—è–¥–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (—Å—Ç–∞—Ä—ã–µ –≤–≤–µ—Ä—Ö—É, –Ω–æ–≤—ã–µ –≤–Ω–∏–∑—É)
                for exercise in workout_details["exercises"]:
                    text += f"\n\nüîπ {exercise['name']} ({exercise['type']})"
                    if exercise['reps']:
                        if exercise['type'] == 'CARDIO':
                            text += "\n–í—Ä–µ–º—è:"
                        else:
                            text += "\n–ü–æ–¥—Ö–æ–¥—ã:"
                        # –ü–æ–¥—Ö–æ–¥—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø–æ—Ä—è–¥–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                        for i, rep in enumerate(exercise['reps'], 1):
                            if exercise['type'] == 'CARDIO':
                                text += f"\n‚è± {rep.get('duration', 0)} –º–∏–Ω"
                            else:
                                text += f"\nüí™ {rep['weight']}–∫–≥ x {rep['count']}"
                    else:
                        if exercise['type'] == 'CARDIO':
                            text += "\n–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                        else:
                            text += "\n–ù–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤"

                await call.message.answer(text, reply_markup=add_exercise_kb)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ –¥–∞—Ç—É {date}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {e}")
                await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
        else:
            await state.set_state(WorkoutStates.adding_exercises)
            await state.update_data(date=date)

            await call.message.answer(
                f"–î–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {date.strftime('%d.%m.%Y')}\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.",
                reply_markup=add_exercise_kb
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –¥–∞—Ç—É {date}")
        await call.answer()
    elif action in ("select_month", "show_months"):
        calendar = build_calendar(year, month, icon_dates=icon_dates)
        await call.message.edit_reply_markup(reply_markup=calendar)
        await call.answer()
    elif action == "show_years":
        from telegram_calendar import build_year_selector
        calendar = build_year_selector(year)
        await call.message.edit_reply_markup(reply_markup=calendar)
        await call.answer()
    elif action == "select_year":
        from telegram_calendar import build_month_selector
        calendar = build_month_selector(year)
        await call.message.edit_reply_markup(reply_markup=calendar)
        await call.answer()
    elif action == "change_year_range":
        from telegram_calendar import build_year_selector
        calendar = build_year_selector(year)
        await call.message.edit_reply_markup(reply_markup=calendar)
        await call.answer()
    else:
        await call.answer()

@router.message(WorkoutStates.adding_exercises, F.text == "–î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")
async def add_exercise(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª –¥–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")
    await state.set_state(WorkoutStates.choosing_exercise_type)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:", reply_markup=build_exercise_type_keyboard())

@router.callback_query(F.data == "add_exercise")
async def add_exercise_inline(call: CallbackQuery, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—É—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    data = await state.get_data()

    if not data.get("date"):
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = call.message.text
        if "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞" in message_text:
            try:
                date_str = message_text.split("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞")[1].split("\n")[0].strip()
                date = datetime.strptime(date_str, "%d.%m.%Y").date()
                await state.update_data(date=date)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞—Ç—ã: {e}")
                await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", show_alert=True)
                return

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    await state.set_state(WorkoutStates.choosing_exercise_type)
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:",
        reply_markup=build_exercise_type_keyboard(for_workout=True)
    )
    await call.answer()

@router.callback_query(F.data.startswith("workout_type_"))
@connection
async def choose_exercise_type(call: CallbackQuery, state: FSMContext, session):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"""
    current_state = await state.get_state()
    if current_state != WorkoutStates.choosing_exercise_type:
        logger.info(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º workout_type_ callback –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {current_state}")
        return False

    # workout_type_STRENGTH -> STRENGTH (—É–∂–µ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
    exercise_type = call.data.split("_")[-1]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –≤—ã–±—Ä–∞–ª —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {exercise_type}")
    await state.update_data(exercise_type=exercise_type)
    await state.set_state(WorkoutStates.choosing_exercise)

    page = 0
    page_size = 5
    exercises, total = await get_exercises_by_type(session, exercise_type, call.from_user.id, page, page_size)

    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:",
        reply_markup=build_exercise_keyboard(exercises, page, total, page_size, for_workout=True)
    )
    await call.answer()


@router.callback_query(F.data.startswith("workout_exercise_"))
@connection
async def choose_workout_exercise(call: CallbackQuery, state: FSMContext, session):
    exercise_id = int(call.data.split("_")[-1])
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –≤—ã–±—Ä–∞–ª —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {exercise_id}")

    current_state = await state.get_state()
    if current_state != WorkoutStates.choosing_exercise:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {current_state}")
        return

    data = await state.get_data()
    if "date" not in data:
        await call.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", show_alert=True)
        return

    exercise = await get_exercise_by_id(session, exercise_id)
    if not exercise:
        await call.answer("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    await state.update_data(exercise_id=exercise_id)
    await state.set_state(WorkoutStates.entering_sets)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    if exercise.type.value.upper() == "CARDIO":
        message_text = "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30)"
    else:
        message_text = (
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "20 10\n"
            "40 10\n"
            "60 10\n"
            "(–≤–µ—Å –ø—Ä–æ–±–µ–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤, –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ ‚Äî –Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥)"
        )

    await call.message.edit_text(message_text)
    await call.answer()

@router.message(WorkoutStates.entering_sets)
@connection
async def enter_sets(message: Message, state: FSMContext, session):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –ø–æ–¥—Ö–æ–¥—ã: {message.text}")
    data = await state.get_data()

    if "date" not in data or "exercise_id" not in data:
        logger.error(f"–ù–µ—Ç –¥–∞—Ç—ã –∏–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ state –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {data}")
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ –∏–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å.")
        await state.clear()
        return

    workout = await get_workout_by_user_and_date(session, user_id=message.from_user.id, date=data["date"])
    if not workout:
        workout = await create_workout(
            session=session,
            user_id=message.from_user.id,
            data=WorkoutCreateSchema(date=data["date"], note=data.get("comment"))
        )

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    exercise = await get_exercise_by_id(session, data["exercise_id"])
    is_cardio = exercise.type.value == "CARDIO"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤ workout_exercises
    from crud.rep import create_reps
    from models.workout_exercise import WorkoutExercise
    from sqlalchemy import select

    result = await session.execute(
        select(WorkoutExercise).where(
            WorkoutExercise.workout_id == workout.id,
            WorkoutExercise.exercise_id == data["exercise_id"]
        )
    )
    workout_exercise = result.scalar_one_or_none()
    if not workout_exercise:
        workout_exercise = WorkoutExercise(
            workout_id=workout.id,
            exercise_id=data["exercise_id"]
        )
        session.add(workout_exercise)
        await session.commit()
        await session.refresh(workout_exercise)

    # –ü–∞—Ä—Å–∏–º –ø–æ–¥—Ö–æ–¥—ã
    reps = []
    if is_cardio:
        try:
            duration = int(message.text.strip())
            reps.append({"duration": duration})
        except ValueError:
            await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç")
            return
    else:
        for line in message.text.strip().split("\n"):
            parts = line.strip().split()
            if len(parts) == 2:
                try:
                    weight = float(parts[0])
                    count = int(parts[1])
                    reps.append({"weight": weight, "count": count})
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–¥—Ö–æ–¥–∞: {line} ({e})")

    if reps:
        await create_reps(session, workout_exercise.id, reps)

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
    workout_details = await get_workout_details(session=session, workout=workout)
    text = f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ {workout.date.strftime('%d.%m.%Y')}\n–ó–∞–º–µ—Ç–∫–∞: {workout.comment or '-'}\n\n–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:"

    for ex in workout_details["exercises"]:
        text += f"\n\nüîπ {ex['name']} ({ex['type']})"
        if ex['reps']:
            if ex['type'] == 'CARDIO':
                text += "\n–í—Ä–µ–º—è:"
                for rep in ex['reps']:
                    text += f"\n{rep.get('duration', 0)} –º–∏–Ω"
            else:
                text += "\n–ü–æ–¥—Ö–æ–¥—ã:"
                for rep in ex['reps']:
                    text += f"\n{rep['weight']}–∫–≥ x {rep['count']}"
        else:
            text += "\n–ü–æ–¥—Ö–æ–¥—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã"


    # –ò—Å–ø–æ–ª—å–∑—É–µ–º reply_markup –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await message.answer(text, reply_markup=add_exercise_kb)
    await state.set_state(WorkoutStates.adding_exercises)


# –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(WorkoutStates.adding_exercises, F.text.in_(["–ö–∞–ª–µ–Ω–¥–∞—Ä—å", "–ì–ª–∞–≤–Ω–∞—è"]))
async def workout_nav_keyboard(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª: {message.text}")
    await state.clear()
    if message.text == "–ö–∞–ª–µ–Ω–¥–∞—Ä—å":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=generate_calendar_kb())
    else:
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=MAIN_MENU_TEXT)

# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
async def add_workout_start(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
    await state.set_state(WorkoutStates.choosing_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:", reply_markup=types.ReplyKeyboardRemove())

# –í–≤–æ–¥ –¥–∞—Ç—ã
@router.message(WorkoutStates.choosing_date)
async def add_workout_date(message: Message, state: FSMContext):
    try:
        date = datetime.strptime(message.text, "%Y-%m-%d").date()
        await state.update_data(date=date)
        await state.set_state(WorkoutStates.entering_note)
        await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∑–∞–º–µ—Ç–∫—É –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ - –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
    except ValueError:
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞: {message.text}")
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")

# –í–≤–æ–¥ –∑–∞–º–µ—Ç–∫–∏
@router.message(WorkoutStates.entering_note)
async def add_workout_note(message: Message, state: FSMContext):
    note = None if message.text.strip() == "-" else message.text.strip()
    await state.update_data(note=note)
    await state.set_state(WorkoutStates.confirming)
    await message.answer("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?", reply_markup=workout_confirm_kb)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
@router.message(WorkoutStates.confirming, F.text == "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
@connection
async def add_workout_save(message: Message, state: FSMContext, session):
    data = await state.get_data()
    await create_workout(session, user_id=message.from_user.id, data=WorkoutCreateSchema(date=data["date"], note=data["note"]))
    await state.clear()
    await message.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=workout_menu_kb)
    logger.info(f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

# –û—Ç–º–µ–Ω–∞
@router.message(WorkoutStates.confirming, F.text == "–û—Ç–º–µ–Ω–∞")
async def add_workout_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=workout_menu_kb)

# –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
@router.message(F.text == "–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
@connection
async def list_workouts(message: Message, state: FSMContext, session):
    workouts = await get_user_workouts(user_id=message.from_user.id)
    if not workouts:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.", reply_markup=workout_menu_kb)
        return

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=f"{w.id}: {w.date} {w.comment or ''}")] for w in workouts] +
                 [[KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    )
    text = "–í–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n" + "\n".join([f"{w.id}: {w.date} {w.comment or ''}" for w in workouts])
    await message.answer(text, reply_markup=kb)

# –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(F.text == "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=MAIN_MENU_TEXT)

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
@connection
@router.message(F.text.regexp(r"^\d+:"))
async def view_workout(message: Message, state: FSMContext, session):
    try:
        workout_id = int(message.text.split(":")[0])
        workout = await get_workout_by_id(session, workout_id)
    except Exception:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    if not workout or workout.user_id != message.from_user.id:
        await message.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    await state.update_data(viewing_workout_id=workout.id)
    text = f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ‚Ññ{workout.id}\n–î–∞—Ç–∞: {workout.date}\n–ó–∞–º–µ—Ç–∫–∞: {workout.comment or '-'}"
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton("–£–¥–∞–ª–∏—Ç—å")],
            [KeyboardButton("–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")]
        ],
        resize_keyboard=True
    )
    await message.answer(text, reply_markup=kb)

# –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
@router.message(F.text == "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
@connection
async def back_to_workout_list(message: Message, state: FSMContext, session):
    workouts = await get_user_workouts(user_id=message.from_user.id)
    if not workouts:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.", reply_markup=workout_menu_kb)
        return

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=f"{w.id}: {w.date} {w.comment or ''}")] for w in workouts] +
                 [[KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    )
    text = "–í–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n" + "\n".join([f"{w.id}: {w.date} {w.comment or ''}" for w in workouts])
    await message.answer(text, reply_markup=kb)

# –ò–Ω–ª–∞–π–Ω: –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è
@router.message(WorkoutStates.adding_exercises)
async def show_add_exercise_inline(message: Message, state: FSMContext):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", callback_data="add_exercise")],
            [InlineKeyboardButton("–ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="calendar")],
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")],
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

# –ò–Ω–ª–∞–π–Ω: –¥–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
@router.callback_query(F.data == "add_exercise")
async def add_exercise_inline(call: CallbackQuery, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—É—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    data = await state.get_data()

    if not data.get("date"):
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = call.message.text
        if "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞" in message_text:
            try:
                date_str = message_text.split("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞")[1].split("\n")[0].strip()
                date = datetime.strptime(date_str, "%d.%m.%Y").date()
                await state.update_data(date=date)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞—Ç—ã: {e}")
                await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", show_alert=True)
                return

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    await state.set_state(WorkoutStates.choosing_exercise_type)
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:",
        reply_markup=build_exercise_type_keyboard(for_workout=True)
    )
    await call.answer()

# –ò–Ω–ª–∞–π–Ω: –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
@router.callback_query(F.data == "calendar")
@connection
async def back_to_calendar_inline(call: CallbackQuery, state: FSMContext, session):
    now = datetime.now()
    workouts = await get_user_workouts(session=session, user_id=call.from_user.id)
    icon_dates: Dict[str, str] = {}
    for w in workouts:
        icon_dates[str(w.date)] = "üèÜ"
    calendar = build_calendar(now.year, now.month, icon_dates=icon_dates)
    await state.clear()
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=calendar)
    await call.answer()

# –ò–Ω–ª–∞–π–Ω: –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "main_menu")
async def back_to_main_inline(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.answer(MAIN_MENU_TEXT)
    await call.answer()

@router.callback_query(F.data.startswith("workout_add_exercise_"))
@connection
async def add_exercise_to_workout(call: CallbackQuery, state: FSMContext, session):
    exercise_id = int(call.data.split("_")[-1])
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –≤—ã–±—Ä–∞–ª —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {exercise_id}")

    current_state = await state.get_state()
    if current_state != WorkoutStates.choosing_exercise:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {current_state}")
        return

    data = await state.get_data()
    if "date" not in data:
        await call.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", show_alert=True)
        return

    exercise = await get_exercise_by_id(session, exercise_id)
    if not exercise:
        await call.answer("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    await state.update_data(exercise_id=exercise_id)
    await state.set_state(WorkoutStates.entering_sets)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    if exercise.type.value == "CARDIO":
        message_text = "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30)"
    else:
        message_text = (
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "20 10\n"
            "40 10\n"
            "60 10\n"
            "(–≤–µ—Å –ø—Ä–æ–±–µ–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤, –∫–∞–∂–¥—ã–π –ø–æ–¥—Ö–æ–¥ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)"
        )

    await call.message.edit_text(message_text)
    await call.answer()
